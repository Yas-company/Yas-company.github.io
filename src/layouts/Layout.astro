---
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="ar" dir="rtl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>

    <!-- SEO Meta Tags -->
    <meta
      name="description"
      content="YAS - شركة سعودية متخصصة في تقديم حلول تقنية متكاملة. نقدم خدمات تطوير البرمجيات، تصميم المواقع، وتطبيقات الموبايل بأعلى معايير الجودة."
    />
    <meta
      name="keywords"
      content="حلول تقنية, تطوير برمجيات, تصميم مواقع, تطبيقات موبايل, شركة تقنية سعودية"
    />
    <meta name="author" content="YAS" />

    <!-- Open Graph Tags -->
    <meta property="og:title" content="YAS - حلول تقنية سعودية" />
    <meta
      property="og:description"
      content="شركة سعودية متخصصة في تقديم حلول تقنية متكاملة. نقدم خدمات تطوير البرمجيات، تصميم المواقع، وتطبيقات الموبايل بأعلى معايير الجودة."
    />
    <meta property="og:image" content="assets/yass logo-05.png" />
    <meta property="og:url" content="https://yas.com" />
    <meta property="og:type" content="website" />

    <!-- Twitter Card Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="YAS - حلول تقنية سعودية" />
    <meta
      name="twitter:description"
      content="شركة سعودية متخصصة في تقديم حلول تقنية متكاملة"
    />
    <meta name="twitter:image" content="assets/yass logo-05.png" />

    <!-- Preload Critical Resources -->
    <link rel="preload" href="assets/yass logo-05.png" as="image" />

    <!-- Google Fonts - Direct Load -->
    <link rel="preconnect" href="//fonts.googleapis.com">
    <link rel="preconnect" href="//fonts.gstatic.com" crossorigin>
    <link
      rel="stylesheet"
      href="//fonts.googleapis.com/css2?family=IBM%20Plex%20Sans%20Arabic:wght@300;400;500;600;700&display=swap"
    />

    <!-- Remix Icon with Preload -->
    <link
      rel="preload"
      href="//cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css"
      as="style"
    />
    <link
      href="//cdnjs.cloudflare.com/ajax/libs/remixicon/4.6.0/remixicon.min.css"
      rel="stylesheet"
    />
    <script is:inline src="//cdn.jsdelivr.net/npm/@reimujs/aos/dist/aos.umd.js"></script>
    <!-- Tailwind CSS -->
    <script is:inline src="//cdn.tailwindcss.com/3.4.16"></script>
     <link
     rel="stylesheet"
     href="https://cdn.jsdelivr.net/npm/@reimujs/aos/dist/aos.css"
    />
    <!-- Floating UI -->
    <script is:inline src="//cdn.jsdelivr.net/npm/@floating-ui/dom@1.5.3/dist/floating-ui.dom.umd.min.js"></script>
    
    <!-- Alpine.js -->
    <script is:inline defer src="//cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    
    <script is:inline>
      // @ts-ignore
      tailwind.config = {
        theme: {
          extend: {
            fontFamily: {
              'sans': ['IBM Plex Sans Arabic', 'system-ui', 'sans-serif'],
              'arabic': ['IBM Plex Sans Arabic', 'system-ui', 'sans-serif'],
            },
            colors: {
              background: "#000033",
              primary: "#91C8E4",
              secondary: "#007FFF",
              accent: "#194CE5",
              // Optionally, adjust gray for better contrast
              gray: {
                50: "#f8fafc",
                100: "#f1f5f9",
                200: "#e2e8f0",
                300: "#cbd5e1",
                400: "#94a3b8",
                500: "#64748b",
                600: "#475569",
                700: "#334155",
                800: "#1e293b",
                900: "#0f172a",
              },
            },
            borderRadius: {
              none: "0px",
              sm: "4px",
              DEFAULT: "8px",
              md: "12px",
              lg: "16px",
              xl: "20px",
              "2xl": "24px",
              "3xl": "32px",
              full: "9999px",
              button: "8px",
            },
          },
        },
      };
    </script>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-JNK28LJLWC"></script>
    <script is:inline>
      // @ts-ignore
      window.dataLayer = window.dataLayer || [];
      // @ts-ignore
      function gtag(){dataLayer.push(arguments);}
      // @ts-ignore
      gtag('js', new Date());
      // @ts-ignore
      gtag('config', 'G-JNK28LJLWC');
    </script>
  </head>
  <body>
    <slot />

    <!-- Alpine.js Data Components -->
<script is:inline>
  // Alpine.js Data Components
  // @ts-ignore
  window.navbarData = function() {
    return {
      mobileMenuOpen: false,
      pastHero: false,
      
      init() {
        this.updateNavbar();
        // Auto close mobile menu on window resize
        window.addEventListener('resize', () => {
          if (window.innerWidth >= 768) {
            this.mobileMenuOpen = false;
          }
        });
      },
      
      toggleMobileMenu() {
        this.mobileMenuOpen = !this.mobileMenuOpen;
      },
      
      closeMobileMenu() {
        this.mobileMenuOpen = false;
      },
      
      updateNavbar() {
        const heroSection = document.querySelector("section");
        if (heroSection) {
          const heroBottom = heroSection.offsetTop + heroSection.offsetHeight;
          const scrollPosition = window.scrollY;
          this.pastHero = scrollPosition > heroBottom - 80;
        }
      },
      
      get navContainerClasses() {
        return this.pastHero 
          ? 'bg-background border-accent/20'
          : 'bg-background/90 border-primary/20';
      },
      
      get navButtonClasses() {
        return 'text-white';
      }
    }
  }
  
  // @ts-ignore
  window.aiAssistantData = function() {
    return {
      chatOpen: false,
      userInput: '',
      messages: [],
      messageId: 0,
      
      knowledgeBase: {
        'ما هي خدماتكم؟': 'نقدم مجموعة شاملة من الخدمات الرقمية تشمل: تطوير تطبيقات الجوال، تطوير المواقع الإلكترونية، برمجة الأنظمة الخلفية، حلول التكامل بين الأنظمة، تصميم واجهات المستخدم وتجربة المستخدم (UI/UX)، الدعم الفني والاستشارات التقنية.',
        'خدمات': 'تشمل خدمات YAS: تصميم وتطوير المواقع، برمجة تطبيقات الجوال، تطوير الأنظمة الخلفية، خدمات الـ API والتكامل، تحسين تجربة المستخدم، وخدمات ما بعد الإطلاق مثل الدعم الفني والصيانة.',
        'هل تطورون تطبيقات جوال؟': 'نعم، نقوم بتطوير تطبيقات مخصصة تعمل على أنظمة iOS وAndroid باستخدام تقنيات حديثة مثل Flutter وReact Native وSwift. نحن نهتم بجودة الأداء وتجربة المستخدم.',
        'كيف يمكنني التواصل معكم؟': 'يمكنك التواصل معنا عبر:<br>📧 البريد الإلكتروني: info@yastech.com.sa<br>📞 الهاتف: +966 50 195 0787<br>🌐 أو عبر نموذج التواصل على موقعنا الرسمي وسنرد خلال 24 ساعة.',
        'تواصل': 'راسلنا على info@yastech.com.sa أو اتصل على +966 50 195 0787، أو عبر نموذج التواصل على موقعنا.',
        'من هي YAS؟': 'YAS هي شركة تقنية سعودية متخصصة في تطوير الحلول الرقمية المبتكرة للشركات والجهات الحكومية والناشئة. نركز على الجودة، السرعة، والمرونة.',
        'ما هي تكلفة الخدمات؟': 'التكلفة تعتمد على متطلبات المشروع. نوفر عروض أسعار شفافة حسب المدة، التقنيات المطلوبة، وحجم العمل. تواصل معنا للحصول على عرض مفصل.',
        'ما هي مدة تنفيذ مشروع تطوير موقع إلكتروني؟': 'مدة تطوير الموقع تعتمد على مدى تعقيده. المواقع الصغيرة تستغرق 2-4 أسابيع، المتوسطة 6-8 أسابيع، والمشاريع الكبرى تصل إلى 12 أسبوع أو أكثر.'
      },
      
      init() {
        this.addMessage('أهلاً بك! كيف يمكنني مساعدتك اليوم؟ يمكنك سؤالي عن خدماتنا، مدة التنفيذ، التكلفة، أو أي استفسار آخر.', false);
      },
      
      toggleChat() {
        this.chatOpen = !this.chatOpen;
      },
      
      closeChat() {
        this.chatOpen = false;
      },
      
      addMessage(text, isUser) {
        this.messages.push({
          id: this.messageId++,
          text: text,
          isUser: isUser,
          timestamp: new Date()
        });
        
        // @ts-ignore
        this.$nextTick(() => {
          // @ts-ignore
          if (this.$refs.chatMessages) {
            // @ts-ignore
            this.$refs.chatMessages.scrollTop = this.$refs.chatMessages.scrollHeight;
          }
        });
      },
      
      sendMessage() {
        if (!this.userInput.trim()) return;
        
        const question = this.userInput.trim();
        this.addMessage(question, true);
        
        // Process the question
        const answer = this.processUserInput(question);
        
        // Add bot response with delay
        setTimeout(() => {
          this.addMessage(answer, false);
        }, 500);
        
        this.userInput = '';
      },
      
      processUserInput(input) {
        const question = input.toLowerCase();
        let answer = 'عذراً، لم أجد إجابة محددة لسؤالك. يمكنك التواصل معنا مباشرة عبر نموذج الاتصال أو الهاتف: <span dir="ltr">+966 50 195 0787</span> للحصول على المساعدة المطلوبة.';
        
        // Check for exact matches or partial matches
        for (const [key, value] of Object.entries(this.knowledgeBase)) {
          if (question.includes(key.toLowerCase()) ||
              key.toLowerCase().includes(question) ||
              this.containsKeywords(question, key)) {
            answer = value;
            break;
          }
        }
        
        return answer;
      },
      
      containsKeywords(userInput, faqQuestion) {
        const userWords = userInput.toLowerCase().split(' ');
        const faqWords = faqQuestion.toLowerCase().split(' ');
        
        let matchCount = 0;
        for (const word of userWords) {
          if (word.length > 2 && faqWords.some(faqWord => faqWord.includes(word) || word.includes(faqWord))) {
            matchCount++;
          }
        }
        return matchCount >= 2;
      }
    }
  }
  
  // @ts-ignore
  window.customDropdown = function() {
    return {
      isOpen: false,
      selectedValue: '',
      selectedText: 'اختر الخدمة',
      hasError: false,
      isValid: false,
      
      options: [
        { value: 'mobile-app', text: 'تطوير تطبيقات الجوال' },
        { value: 'web-development', text: 'تطوير المواقع والأنظمة' },
        { value: 'backend', text: 'تطوير الأنظمة الخلفية' },
        { value: 'integration', text: 'خدمات التكامل' },
        { value: 'ui-ux', text: 'تصميم واجهات المستخدم' },
        { value: 'support', text: 'الدعم والاستشارات' },
        { value: 'other', text: 'أخرى' }
      ],
      
      init() {
        // Initialize Floating UI when component mounts
        // @ts-ignore
        this.$nextTick(() => {
          this.setupFloating();
        });
      },
      
      setupFloating() {
        const button = this.$refs.button;
        const dropdown = this.$refs.dropdown;
        
        if (button && dropdown) {
          const { computePosition, offset, flip, shift } = FloatingUI;
          
          computePosition(button, dropdown, {
            placement: 'bottom-start',
            middleware: [
              offset(4),
              flip(),
              shift({ padding: 8 })
            ]
          }).then(({ x, y }) => {
            Object.assign(dropdown.style, {
              left: `${x}px`,
              top: `${y}px`,
            });
          });
        }
      },
      
      toggleDropdown() {
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
          // @ts-ignore
          this.$nextTick(() => {
            this.setupFloating();
          });
        }
      },
      
      closeDropdown() {
        this.isOpen = false;
      },
      
      selectOption(option) {
        this.selectedValue = option.value;
        this.selectedText = option.text;
        this.closeDropdown();
        this.validateSelection();
        
        // Call form validation directly
        // @ts-ignore
        if (window.validateServiceField) {
          // @ts-ignore
          window.validateServiceField(this.selectedValue);
        }
        
        // Call global validation function if available
        // @ts-ignore
        if (window.updateSubmitButton) {
          // @ts-ignore
          window.updateSubmitButton();
        }
      },
      
      handleBlur() {
        // Small delay to allow for option selection
        setTimeout(() => {
          if (!this.isOpen) {
            this.validateSelection();
            
            // Mark as blurred for validation
            // @ts-ignore
            if (window.hasBlurred) {
              // @ts-ignore
              window.hasBlurred.service = true;
            }
            
            // Call form validation directly
            // @ts-ignore
            if (window.validateServiceField) {
              // @ts-ignore
              window.validateServiceField(this.selectedValue);
            }
            
            // Call global validation function if available
            // @ts-ignore
            if (window.updateSubmitButton) {
              // @ts-ignore
              window.updateSubmitButton();
            }
          }
        }, 150);
      },
      
      validateSelection() {
        this.hasError = !this.selectedValue;
        this.isValid = !!this.selectedValue;
        
        // Update the hidden select validation state
        const selectElement = document.getElementById('service');
        if (selectElement && this.selectedValue) {
          // @ts-ignore
          selectElement.setCustomValidity('');
        } else if (selectElement) {
          // @ts-ignore
          selectElement.setCustomValidity('يرجى اختيار الخدمة المطلوبة');
        }
      }
    }
  }
  
  // @ts-ignore
  window.policiesDropdown = function() {
    return {
      isOpen: false,
      selectedValue: 'tab1',
      selectedText: 'التنفيذ الكامل بدون التزام مستقبلي',
      
      options: [
        { value: 'tab1', text: 'التنفيذ الكامل بدون التزام مستقبلي' },
        { value: 'tab2', text: 'التنفيذ والدعم الفني المستمر' },
        { value: 'tab3', text: 'شراكة تشغيلية مع مشاركة الأرباح' },
        { value: 'tab4', text: 'شراكة ستراتيجية بملكية مشتركة' },
        { value: 'tab5', text: 'استثمار مباشر من YAS بملكية مسيطرة' }
      ],
      
      init() {
        this.$nextTick(() => {
          this.setupFloating();
        });
      },
      
      setupFloating() {
        const button = this.$refs.button;
        const dropdown = this.$refs.dropdown;
        
        if (button && dropdown) {
          const { computePosition, offset, flip, shift } = FloatingUI;
          
          computePosition(button, dropdown, {
            placement: 'bottom-start',
            middleware: [
              offset(4),
              flip(),
              shift({ padding: 8 })
            ]
          }).then(({ x, y }) => {
            Object.assign(dropdown.style, {
              left: `${x}px`,
              top: `${y}px`,
            });
          });
        }
      },
      
      toggleDropdown() {
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
          // @ts-ignore
          this.$nextTick(() => {
            this.setupFloating();
          });
        }
      },
      
      closeDropdown() {
        this.isOpen = false;
      },
      
      selectOption(option) {
        this.selectedValue = option.value;
        this.selectedText = option.text;
        this.closeDropdown();
        
        // Trigger tab change
        this.switchTab(option.value);
      },
      
      handleBlur() {
        // Small delay to allow for option selection
        setTimeout(() => {
          if (!this.isOpen) {
            // Tab switching is handled in selectOption
          }
        }, 150);
      },
      
      switchTab(tabId) {
        // Hide all tab cards
        const allTabs = document.querySelectorAll('.tab-card');
        allTabs.forEach(tab => {
          tab.classList.remove('active');
        });
        
        // Show selected tab
        const selectedTab = document.getElementById(tabId);
        if (selectedTab) {
          selectedTab.classList.add('active');
        }
      }
    }
  }

  
  // @ts-ignore
  window.whyYasData = function() {
    return {
      currentIndex: 0,
      
      cards: [
        {
          title: 'فهم السوق',
          icon: 'ri-map-pin-user-line',
          description: 'نمتلك فهماً عميقاً للسوق المحلي واحتياجات المستخدمين، مما يمكننا من تقديم حلول مناسبة وفعالة تلبي توقعات العملاء وتتماشى مع الثقافة المحلية.',
          features: [
            { title: 'دراسات السوق الشاملة', description: 'تحليل عميق لاتجاهات السوق والفرص', icon: 'ri-line-chart-line' },
            { title: 'تحليل المنافسين', description: 'دراسة متعمقة للمنافسة والتميز', icon: 'ri-focus-3-line' },
          ],
        },
        {
          title: 'جودة التنفيذ',
          icon: 'ri-award-line',
          description: 'نقدم جودة تنفيذ عالية مع مرونة تناسب كل مشروع وتلبي متطلباته الخاصة، باستخدام أحدث التقنيات وأفضل الممارسات العالمية.',
          features: [
            { title: 'معايير عالمية', description: 'نتبع أفضل المعايير العالمية في التطوير والبرمجة', icon: 'ri-global-line' },
            { title: 'اختبارات شاملة', description: 'نجري اختبارات مكثفة لضمان جودة المنتج النهائي', icon: 'ri-test-tube-line' },
          ],
        },
        {
          title: 'الالتزام',
          icon: 'ri-time-line',
          description: 'نلتزم بالوقت دون التفريط في جودة العمل، مع ضمان تسليم المشاريع في موعدها المحدد والحفاظ على أعلى معايير الجودة.',
          features: [
            { title: 'التزامنا بالمواعيد', description: 'نحرص على الالتزام بالمواعيد المحددة دون التفريط في جودة العمل', icon: 'ri-calendar-check-line' },
            { title: 'شفافية ومتابعة', description: 'نقدم تقارير دورية وشفافية كاملة في جميع مراحل العمل', icon: 'ri-eye-line' },
          ],
        },
        {
          title: 'الشغف',
          icon: 'ri-heart-line',
          description: 'نتعامل مع كل مشروع وكأنه مشروعنا الخاص، ونضع كل خبراتنا وإمكانياتنا لإنجازه بأفضل شكل ممكن.',
          features: [
            { title: 'تركيز على التفاصيل', description: 'نهتم بأدق التفاصيل في كل مشروع لضمان أفضل النتائج', icon: 'ri-focus-3-line' },
            { title: 'التزام بالجودة', description: 'نسعى دائماً لتقديم أعلى مستويات الجودة في كل ما نقوم به', icon: 'ri-shield-star-line' },
          ],
        },
        {
          title: 'الدعم',
          icon: 'ri-customer-service-2-line',
          description: 'نواصل دعم عملائنا بعد الإطلاق وننمو معهم باستمرار، ونقدم خدمات متابعة وتطوير مستمرة.',
          features: [
            { title: 'دعم فني متواصل', description: 'نقدم الدعم الفني والمساعدة عند الحاجة', icon: 'ri-24-hours-line' },
            { title: 'تحديثات دورية', description: 'نحافظ على تحديث الأنظمة وتطويرها باستمرار', icon: 'ri-refresh-line' },
          ],
        },
        {
          title: 'الفريق',
          icon: 'ri-team-line',
          description: 'نضم نخبة من الخبراء المتخصصين في مختلف المجالات التقنية لضمان تقديم حلول متكاملة ومبتكرة.',
          features: [
            { title: 'تخصصات متنوعة', description: 'فريق عمل يضم مطورين، مصممين، وخبراء في مختلف المجالات', icon: 'ri-user-settings-line' },
            { title: 'خبرة وكفاءة', description: 'أعضاء فريقنا يمتلكون خبرة واسعة في تنفيذ المشاريع التقنية', icon: 'ri-briefcase-4-line' },
          ],
        },
      ],
      
      get currentCard() {
        return this.cards[this.currentIndex];
      },

      init() {
        // No keyboard nav needed for this layout
      },
      
      goToCard(index) {
        if(index < 0) {
          this.currentIndex = this.cards.length - 1;
        } else if (index >= this.cards.length) {
          this.currentIndex = 0;
        } else {
          this.currentIndex = index;
        }
      },
      
      nextCard() {
        this.goToCard(this.currentIndex + 1);
      },
      
      prevCard() {
        this.goToCard(this.currentIndex - 1);
      },
      
      isInViewport(element) {
        if (!element) return false;
        const rect = element.getBoundingClientRect();
        return rect.top < window.innerHeight && rect.bottom > 0;
      }
    }
  }
</script>

<!-- Form Response Modal Functions using Alpine.js -->
<script is:inline>
  function showModal(title, message, type = 'success') {
    const modal = document.getElementById('form-response-modal');
    // @ts-ignore
    if (modal && modal._x_dataStack && modal._x_dataStack[0]) {
      // @ts-ignore
      modal._x_dataStack[0].show(title, message, type);
    }
  }
</script>

<!-- Form Validation Script -->
<script is:inline>
  // Contact Form Validation
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('contact-form');
    const nameField = document.getElementById('name');
    const emailField = document.getElementById('email');
    const serviceField = document.getElementById('service');
    const messageField = document.getElementById('message');
    const phoneField = document.getElementById('phone');
    const submitBtn = document.getElementById('submit-btn');
    
    // Validation rules
    const validators = {
      name: {
        required: true,
        minLength: 2,
        pattern: /^[\u0600-\u06FFa-zA-Z\s]+$/,
        messages: {
          required: 'الاسم مطلوب',
          minLength: 'الاسم يجب أن يكون على الأقل حرفين',
          pattern: 'الاسم يجب أن يحتوي على أحرف فقط'
        }
      },
      email: {
        required: true,
        pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        messages: {
          required: 'البريد الإلكتروني مطلوب',
          pattern: 'يرجى إدخال بريد إلكتروني صحيح'
        }
      },
      service: {
        required: true,
        messages: {
          required: 'يرجى اختيار الخدمة المطلوبة'
        }
      },
      message: {
        required: false,
        messages: {
          required: 'الرسالة مطلوبة'
        }
      },
      phone: {
        required: false,
        pattern: /^[\+]?[0-9\s\-\(\)]+$/,
        messages: {
          required: 'رقم الهاتف مطلوب',
          pattern: 'يرجى إدخال رقم هاتف صحيح'
        }
      }
    };
    
    // Validation state
    const validationState = {
      name: false,
      email: false,
      service: false,
      message: true,  // Optional field, always valid
      phone: true     // Optional field, always valid
    };
    
    // Validate field function
    function validateField(fieldName, value) {
      // @ts-ignore
      const rules = validators[fieldName];
      const errorDiv = document.getElementById(`${fieldName}-error`);
      const field = document.getElementById(fieldName);
      
      // Special handling for custom dropdown service field
      if (fieldName === 'service') {
        return validateServiceField(value);
      }
      
      // Clear previous styling
      if (field) {
        field.classList.remove('border-red-500', 'border-green-500');
      }
      if (errorDiv) {
        errorDiv.classList.add('hidden');
        errorDiv.textContent = '';
      }
      
      // Required validation
      if (rules.required && (!value || value.trim() === '')) {
        showError(fieldName, rules.messages.required);
        return false;
      }
      
      // Skip other validations if field is empty and not required
      if (!value || value.trim() === '') {
        // @ts-ignore
        validationState[fieldName] = true;
        if (field) {
          field.classList.add('border-green-500');
        }
        return true;
      }
      
      // MinLength validation
      if (rules.minLength && value.trim().length < rules.minLength) {
        showError(fieldName, rules.messages.minLength);
        return false;
      }
      
      // Pattern validation
      if (rules.pattern && !rules.pattern.test(value.trim())) {
        showError(fieldName, rules.messages.pattern);
        return false;
      }
      
      // Valid field
      // @ts-ignore
      validationState[fieldName] = true;
      if (field) {
        field.classList.add('border-green-500');
      }
      return true;
    }
    
    // Special validation for custom dropdown service field
    function validateServiceField(value) {
      const rules = validators.service;
      const errorDiv = document.getElementById('service-error');
      
      // Always clear previous error state first
      if (errorDiv) {
        errorDiv.classList.add('hidden');
        errorDiv.textContent = '';
      }
      
      // Required validation
      if (rules.required && (!value || value.trim() === '')) {
        validationState.service = false;
        if (errorDiv) {
          errorDiv.textContent = rules.messages.required;
          errorDiv.classList.remove('hidden');
        }
        return false;
      }
      
      // Valid field - ensure error is hidden and state is updated
      validationState.service = true;
      if (errorDiv) {
        errorDiv.classList.add('hidden');
        errorDiv.textContent = '';
      }
      return true;
    }
    
    // Show error function
    function showError(fieldName, message) {
      const errorDiv = document.getElementById(`${fieldName}-error`);
      const field = document.getElementById(fieldName);
      
      // @ts-ignore
      validationState[fieldName] = false;
      
      // Special handling for custom dropdown service field
      if (fieldName !== 'service' && field) {
        field.classList.add('border-red-500');
      }
      
      if (errorDiv) {
        errorDiv.textContent = message;
        errorDiv.classList.remove('hidden');
      }
    }
    
    // Update submit button state
    function updateSubmitButton() {
      const allValid = Object.values(validationState).every(state => state === true);
      if (submitBtn) {
        // @ts-ignore
        submitBtn.disabled = !allValid;
      }
    }
    
    // Make functions globally accessible immediately
    // @ts-ignore
    window.updateSubmitButton = updateSubmitButton;
    // @ts-ignore
    window.validateServiceField = validateServiceField;
    // @ts-ignore
    window.validationState = validationState;
    
    // Add blur event listeners
    if (nameField) {
      nameField.addEventListener('blur', function() {
        // @ts-ignore
        validateField('name', this.value);
        updateSubmitButton();
      });
    }
    
    if (emailField) {
      emailField.addEventListener('blur', function() {
        // @ts-ignore
        validateField('email', this.value);
        updateSubmitButton();
      });
    }
    
    // Service field validation is handled by Alpine.js component
    // No need for event listeners on the hidden select element
    
    // Message field is optional, no validation needed
    
    // Add input event listeners for real-time feedback after initial blur
    let hasBlurred = {
      name: false,
      email: false,
      service: false,
      message: true,  // Optional field, no validation needed
      phone: true     // Optional field, no validation needed
    };
    
    // Make hasBlurred globally accessible
    // @ts-ignore
    window.hasBlurred = hasBlurred;
    
    if (nameField) {
      nameField.addEventListener('blur', () => hasBlurred.name = true);
    }
    if (emailField) {
      emailField.addEventListener('blur', () => hasBlurred.email = true);
    }
    if (serviceField) {
      serviceField.addEventListener('blur', () => hasBlurred.service = true);
    }
    
    // Add phone field validation
    if (phoneField) {
      phoneField.addEventListener('blur', function() {
        // @ts-ignore
        if (this.value.trim()) {  // Only validate if not empty (since it's optional)
          // @ts-ignore
          validateField('phone', this.value);
          updateSubmitButton();
        }
        hasBlurred.phone = true;
      });
    }
    
    if (nameField) {
      nameField.addEventListener('input', function() {
        if (hasBlurred.name) {
          // @ts-ignore
          validateField('name', this.value);
          updateSubmitButton();
        }
      });
    }
    
    if (emailField) {
      emailField.addEventListener('input', function() {
        if (hasBlurred.email) {
          // @ts-ignore
          validateField('email', this.value);
          updateSubmitButton();
        }
      });
    }
    
    if (phoneField) {
      phoneField.addEventListener('input', function() {
        // @ts-ignore
        if (hasBlurred.phone && this.value.trim()) {  // Only validate if not empty (since it's optional)
          // @ts-ignore
          validateField('phone', this.value);
          updateSubmitButton();
        }
      });
    }
    
    // Message field is optional, no input validation needed
    
    // Form submit validation and submission
    if (form) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Validate all required fields
        const nameValid = nameField ? validateField('name', nameField.value) : false;
        const emailValid = emailField ? validateField('email', emailField.value) : false;
        const serviceValid = serviceField ? validateField('service', serviceField.value) : false;
        // Message field is optional, no validation needed
        
        updateSubmitButton();
        
        if (nameValid && emailValid && serviceValid) {
          // Disable submit button and show loading state
          if (submitBtn) {
            // @ts-ignore
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="ri-loader-4-line animate-spin mr-2"></i>جاري الإرسال...';
          }
          
          try {
            // Prepare form data
            const formData = {
              name: nameField ? nameField.value.trim() : '',
              email: emailField ? emailField.value.trim() : '',
              service: serviceField ? serviceField.value : '',
              message: messageField ? messageField.value.trim() : '',
              phone: document.getElementById('phone') ? document.getElementById('phone').value.trim() : ''
            };
            
            // Send to YAS API endpoint directly
            const response = await fetch('https://yastech.io/api/request', {
              method: 'POST',
              headers: {
                'accept': '*/*',
                'accept-language': 'ar,en-US;q=0.9,en;q=0.8,ar-SA;q=0.7,eo;q=0.6',
                'content-type': 'application/json',
              },
              body: JSON.stringify(formData),
            });
            
            if (response.ok) {
              // Success - show success modal
              // @ts-ignore
              showModal(
                'تم إرسال طلبك بنجاح!',
                'شكراً لك على تواصلك معنا. سنقوم بالرد عليك في أقرب وقت ممكن.',
                'success'
              );
              
              // Reset form
              // @ts-ignore
              form.reset();
              
              // Reset validation state
              Object.keys(validationState).forEach(key => {
                // Reset states based on field requirements
                if (key === 'message' || key === 'phone') {
                  // @ts-ignore
                  validationState[key] = true;  // Optional fields, always valid
                  // @ts-ignore
                  hasBlurred[key] = true;
                } else {
                  // @ts-ignore
                  validationState[key] = false;
                  // @ts-ignore
                  hasBlurred[key] = false;
                }
                
                const field = document.getElementById(key);
                const errorDiv = document.getElementById(`${key}-error`);
                
                // Special handling for custom dropdown service field
                if (key !== 'service' && field) {
                  field.classList.remove('border-red-500', 'border-green-500');
                }
                
                if (errorDiv) {
                  errorDiv.classList.add('hidden');
                  errorDiv.textContent = '';
                }
              });
              
            } else {
              // Error response from server
              const errorData = await response.text();
              throw new Error(`Server error: ${response.status}`);
            }
            
          } catch (error) {
            console.error('Form submission error:', error);
            
            // Show error modal
            // @ts-ignore
            showModal(
              'حدث خطأ في الإرسال',
              'عذراً، حدث خطأ أثناء إرسال طلبك. يرجى المحاولة مرة أخرى أو التواصل معنا مباشرة.',
              'error'
            );
          }
          
          // Reset submit button
          if (submitBtn) {
            // @ts-ignore
            submitBtn.disabled = false;
            submitBtn.innerHTML = 'إرسال الطلب';
          }
          updateSubmitButton();
          
        } else {
          // Scroll to first error
          const firstError = form.querySelector('.border-red-500');
          if (firstError) {
            firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
            // @ts-ignore
            firstError.focus();
          }
        }
      });
    }
    
    // Initial button state
    updateSubmitButton();
  });
</script>

<!-- Initialize AOS.js -->
<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    // @ts-ignore
    AOS.init({
      duration: 800,
      easing: 'ease-out',
      once: true,
      offset: 50,
      delay: 0
    });
  });
</script>

  </body>
</html>
