document.addEventListener("DOMContentLoaded", function () {
  // Feature Cards Animation
  const featureObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          if (entry.target.classList.contains("feature-fade-in")) {
            entry.target.style.animation = "fadeIn 0.8s ease forwards";
            entry.target.style.opacity = "1";
          } else {
            entry.target.style.animation = "fadeInUp 0.6s ease forwards";
            entry.target.style.opacity = "1";
          }
        }
      });
    },
    {
      threshold: 0.1,
      rootMargin: "0px 0px -10% 0px",
    }
  );

  document.querySelectorAll(".feature-card").forEach((card, index) => {
    card.style.transitionDelay = index * 100 + "ms";
    featureObserver.observe(card);
  });

  document.querySelectorAll(".feature-fade-in").forEach((element) => {
    featureObserver.observe(element);
  });

  // Work Steps Animation
  const workSteps = document.querySelectorAll('.work-step');
  
  // Set initial state for all work steps
  workSteps.forEach((step, index) => {
    step.style.opacity = '0';
    step.style.transform = 'translateY(32px)';
    step.style.transition = 'all 0.6s ease-out';
  });
  
  const workObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry, index) => {
      if (entry.isIntersecting) {
        // Add a small delay based on the step index for staggered animation
        const stepIndex = Array.from(workSteps).indexOf(entry.target);
        setTimeout(() => {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
        }, stepIndex * 150); // 150ms delay between each step
        
        // Update progress bar if it exists
        const progress = document.querySelector(".work-progress");
        if (progress) {
          setTimeout(() => {
            progress.style.width = (stepIndex + 1) * (100 / 6) + "%";
            progress.style.transition = "width 0.6s ease";
          }, stepIndex * 150);
        }
      } else {
        // Reset animation when out of view (optional - for re-triggering)
        entry.target.style.opacity = '0';
        entry.target.style.transform = 'translateY(32px)';
      }
    });
  }, {
    threshold: 0.2,
    rootMargin: '0px 0px -50px 0px'
  });
  
  workSteps.forEach((step, index) => {
    workObserver.observe(step);
  });

  // FAQ Accordion
  const faqButtons = document.querySelectorAll(".faq-button");
  faqButtons.forEach((button) => {
    button.addEventListener("click", function () {
      const content = this.nextElementSibling;
      const icon = this.querySelector(".faq-icon");
      if (content.classList.contains("hidden")) {
        content.classList.remove("hidden");
        icon.classList.remove("ri-add-line");
        icon.classList.add("ri-subtract-line");
      } else {
        content.classList.add("hidden");
        icon.classList.remove("ri-subtract-line");
        icon.classList.add("ri-add-line");
      }
    });
  });

  // --- START NEW UNIFIED TAB SYSTEM ---
  function initializeTabGroup(containerSelector) {
    const container = document.querySelector(containerSelector);
    if (!container) return;

    const tabButtons = container.querySelectorAll('[data-tab]');
    const tabContent = container.querySelector('.tab-content');
    
    if (!tabContent) return;
    const tabPanes = tabContent.querySelectorAll('.tab-pane');

    if (tabButtons.length === 0 || tabPanes.length === 0) return;

    const switchTab = (targetId) => {
      // Only deactivate tabs within THIS specific container
      tabPanes.forEach(pane => {
        pane.classList.remove('active');
        pane.style.display = 'none';
      });
      
      tabButtons.forEach(button => {
        button.classList.remove('active');
        // Reset button styles based on section - preserve existing classes
        if (containerSelector === '#why-yas') {
          // Reset Why YAS button styles
          button.className = "tab-button px-6 py-3 rounded-xl bg-accent/10 text-gray-700 shadow-lg hover:shadow-xl hover:-translate-y-1 transition-all duration-300 border border-accent/20";
        } else if (containerSelector === '#policies-models') {
          // Reset Policies button styles - preserve existing classes
          button.classList.remove("text-primary", "border-primary", "active");
          button.classList.add("text-gray-500", "border-transparent");
          // Reset inline styles
          button.style.color = "#6b7280";
          button.style.borderColor = "transparent";
          button.style.backgroundColor = "";
        }
      });

      // Activate the target within THIS container only
      const targetPane = tabContent.querySelector(`#${targetId}`);
      const targetButton = container.querySelector(`[data-tab="${targetId}"]`);

      if (targetPane && targetButton) {
        targetPane.classList.add('active');
        targetPane.style.display = 'block';
        targetButton.classList.add('active');
        
        // Apply section-specific active styles
        if (containerSelector === '#why-yas') {
          // Why YAS active button styles
          targetButton.className = "tab-button active px-6 py-3 rounded-xl bg-primary text-background shadow-lg shadow-primary/20 hover:shadow-xl hover:shadow-primary/30 transition-all duration-300";
        } else if (containerSelector === '#policies-models') {
          // Policies active button styles - preserve existing classes
          targetButton.classList.remove("text-gray-500", "border-transparent");
          targetButton.classList.add("text-primary", "border-primary", "active");
          // Apply inline styles for visibility
          targetButton.style.color = "#00CCFF";
          targetButton.style.borderColor = "#00CCFF";
          targetButton.style.backgroundColor = "rgba(0, 204, 255, 0.05)";
        }
      }
    };

    tabButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const tabId = button.getAttribute('data-tab');
        switchTab(tabId);
      });
    });

    // Initialize the first tab as active for each section
    if (tabButtons.length > 0) {
      const firstTabId = tabButtons[0].getAttribute('data-tab');
      switchTab(firstTabId);
    }
  }

  // Initialize each tab group independently
  initializeTabGroup('#why-yas');
  initializeTabGroup('#policies-models');
  // --- END NEW UNIFIED TAB SYSTEM ---

 // AI Assistant Chatbot - Yas Company
const knowledgeBase = {
  // ๐งฑ ุงูุฎุฏูุงุช ุงูุนุงูุฉ
  'ูุง ูู ุฎุฏูุงุชููุ': 'ููุฏู ูุฌููุนุฉ ุดุงููุฉ ูู ุงูุฎุฏูุงุช ุงูุฑูููุฉ ุชุดูู: ุชุทููุฑ ุชุทุจููุงุช ุงูุฌูุงูุ ุชุทููุฑ ุงูููุงูุน ุงูุฅููุชุฑูููุฉุ ุจุฑูุฌุฉ ุงูุฃูุธูุฉ ุงูุฎูููุฉุ ุญููู ุงูุชูุงูู ุจูู ุงูุฃูุธูุฉุ ุชุตููู ูุงุฌูุงุช ุงููุณุชุฎุฏู ูุชุฌุฑุจุฉ ุงููุณุชุฎุฏู (UI/UX)ุ ุงูุฏุนู ุงูููู ูุงูุงุณุชุดุงุฑุงุช ุงูุชูููุฉ.',
  'ุฎุฏูุงุช': 'ุชุดูู ุฎุฏูุงุช YAS: ุชุตููู ูุชุทููุฑ ุงูููุงูุนุ ุจุฑูุฌุฉ ุชุทุจููุงุช ุงูุฌูุงูุ ุชุทููุฑ ุงูุฃูุธูุฉ ุงูุฎูููุฉุ ุฎุฏูุงุช ุงูู API ูุงูุชูุงููุ ุชุญุณูู ุชุฌุฑุจุฉ ุงููุณุชุฎุฏูุ ูุฎุฏูุงุช ูุง ุจุนุฏ ุงูุฅุทูุงู ูุซู ุงูุฏุนู ุงูููู ูุงูุตูุงูุฉ.',
  'ูู ุชูุฏููู ุฎุฏูุงุช ุชุตููู ูุงุฌูุงุช ุงููุณุชุฎุฏูุ': 'ูุนูุ ููุชูู ูุฑูู ุชุตููู ูุชุฎุตุต ููุฏู ุชุฌุงุฑุจ ูุณุชุฎุฏู ูุฑูุฏุฉ ูุชุตูููุงุช ุงุญุชุฑุงููุฉ ุชุชูุงุดู ูุน ูููุฉ ุนููู ูุชุญูู ุณูููุฉ ุงูุงุณุชุฎุฏุงู.',

  // ๐ฑ ุงูุชุทุจููุงุช
  'ูู ุชุทูุฑูู ุชุทุจููุงุช ุฌูุงูุ': 'ูุนูุ ูููู ุจุชุทููุฑ ุชุทุจููุงุช ูุฎุตุตุฉ ุชุนูู ุนูู ุฃูุธูุฉ iOS ูAndroid ุจุงุณุชุฎุฏุงู ุชูููุงุช ุญุฏูุซุฉ ูุซู Flutter ูReact Native ูSwift. ูุญู ููุชู ุจุฌูุฏุฉ ุงูุฃุฏุงุก ูุชุฌุฑุจุฉ ุงููุณุชุฎุฏู.',
  'ูู ุชุฏุนููู ูุดุฑ ุงูุชุทุจููุงุช ุนูู ุงููุชุงุฌุฑุ': 'ูุนูุ ูุญู ููุฏู ุฎุฏูุฉ ุฑูุน ุงูุชุทุจููุงุช ุนูู ูุชุฌุฑู App Store ูGoogle Play ุจูุง ูุดูู ุชุฌููุฒ ุงููููุงุชุ ุฅุนุฏุงุฏ ุงูุฅุนูุงูุงุชุ ูุถูุงู ุชูุงูู ุงูุชุทุจูู ูุน ุณูุงุณุงุช ุงููุชุงุฌุฑ.',
  
  // ๐ ุงูููุงูุน ูุงูุฃูุธูุฉ
  'ูู ุชุตูููู ููุงูุน ูุชุฌุงูุจุฉุ': 'ุจุงูุชุฃููุฏุ ุฌููุน ุงูููุงูุน ุงูุชู ูููู ุจุชุทููุฑูุง ูุชุฌุงูุจุฉ ุจุงููุงูู ูุน ุดุงุดุงุช ุงูุฌูุงู ูุงูุฃุฌูุฒุฉ ุงูููุญูุฉ ูุถูุงู ุฃูุถู ุชุฌุฑุจุฉ ูููุณุชุฎุฏู.',
  'ูู ุชุจุฑูุฌูู ููุญุงุช ุชุญูู ุฎุงุตุฉุ': 'ูุนูุ ูุตูู ููุทูุฑ ููุญุงุช ุชุญูู ูุฎุตุตุฉ ุญุณุจ ุงุญุชูุงุฌุงุช ุงูุนูููุ ูุน ูุงุฌูุงุช ุณููุฉ ุงูุงุณุชุฎุฏุงู ูุฅููุงููุงุช ูุชูุฏูุฉ ูุฅุฏุงุฑุฉ ุงููุญุชูู ุฃู ุงููุธุงู.',
  
  // โ๏ธ ุงูุญููู ุงูุณุญุงุจูุฉ ูุงูุชูุงูู
  'ูุง ูู ูููุฒุงุช ุงูุญููู ุงูุณุญุงุจูุฉ ุงูุชู ุชูุฏููููุงุ': 'ุญููู YAS ุงูุณุญุงุจูุฉ ุชููุฑ ุฃูุงู ุนุงููุ ูุณุฎ ุงุญุชูุงุทูุ ูุฑููุฉ ูู ุงูุชูุณุนุ ูุตูู ูู ุฃู ููุงูุ ูุชูููุฉ ุฃูู ูู ุงูุจููุฉ ุงูุชุญุชูุฉ ุงูุชูููุฏูุฉ.',
  'ูู ูููููู ุฏูุฌ ุงูุฃูุธูุฉ ูุน ุฃูุธูุฉ ุฎุงุฑุฌูุฉุ': 'ูุนูุ ููุฏู ุฎุฏูุงุช ุงูุชูุงูู ูุน ุงูุฃูุธูุฉ ุงูุฃุฎุฑู ูุซู ุฃูุธูุฉ ERPุ CRMุ ุจูุงุจุงุช ุงูุฏูุนุ ุฃู ุฃูุธูุฉ ุงูุฌูุงุช ุงูุญููููุฉุ ุนุจุฑ API ูุฎุฏูุงุช ุฑุจุท ูุฎุตุตุฉ.',
  
  // ๐ ุงูุชุณููู ูุงูุชุญููู
  'ููู ูููููู ููุงุณ ูุฌุงุญ ุญููุงุช ุงูุชุณููู ุงูุฑูููุ': 'ูุณุชุฎุฏู ุฃุฏูุงุช ุชุญููููุฉ ูุชูุฏูุฉ ูุชูุฏูู ุชูุงุฑูุฑ ุดุงููุฉ ุชุดูู ูุนุฏู ุงูุชุญูููุ ุนุฏุฏ ุงูุฒูุงุฑุงุชุ ุชูููุฉ ุงูุงูุชุณุงุจุ ุงูุนุงุฆุฏ ุนูู ุงูุงุณุชุซูุงุฑุ ูุบูุฑูุง.',
  'ูู ุชูุฏููู ุฎุฏูุงุช ุชุณููู ุฑูููุ': 'ูุนูุ ููุฏู ุฎุฏูุงุช ุชุณููู ุฑููู ูุชูุงููุฉ ุชุดูู ุฅุฏุงุฑุฉ ุงูุญููุงุช ุงูุฅุนูุงููุฉุ ุชุญุณูู ูุญุฑูุงุช ุงูุจุญุซ SEOุ ุงูุชุณููู ุนุจุฑ ูุณุงุฆู ุงูุชูุงุตูุ ูุฅูุดุงุก ุงููุญุชูู ุงูุฅุจุฏุงุนู.',
  
  // โ๏ธ ุงูุชุฎุตูุต ูุงูุฏุนู
  'ูู ูููููู ุชุทููุฑ ุญููู ูุฎุตุตุฉ ุญุณุจ ุงุญุชูุงุฌุงุช ุดุฑูุชูุงุ': 'ูุนูุ ูุญู ูุชุฎุตุตูู ูู ุชูุฏูู ุญููู ุจุฑูุฌูุฉ ูุฎุตุตุฉ ุชูุงุณุจ ุทุจูุนุฉ ุนูู ูู ุนูููุ ุณูุงุก ูุงู ูุธุงููุง ุฏุงุฎูููุงุ ููุตุฉ ุฅููุชุฑูููุฉุ ุฃู ุชุทุจูู ุฎุงุต.',
  'ูู ุชูุฏููู ุฎุฏูุงุช ููุดุฑูุงุช ุงููุงุดุฆุฉุ': 'ูุฏุนู ุงูุดุฑูุงุช ุงููุงุดุฆุฉ ุจููุงุฐุฌ ุนูู ูุฑูุฉ ูุฎุทุท ุชุทููุฑ ุชุชูุงุดู ูุน ุงูููุฒุงููุฉ ูุชุณุงุนุฏ ุนูู ุงูุงูุทูุงู ุงูุชููู ุงูุณุฑูุน ูุชุญููู ุงูุฃูุฏุงู.',
  'ูู ุชูุฏููู ุจุงูุงุช ุฏุนู ูููุ': 'ูุนูุ ูุฏููุง ุจุงูุงุช ุฏุนู ููู ูุชููุนุฉ ุชุดูู ุตูุงูุฉ ุฏูุฑูุฉุ ุฅุตูุงุญ ูุดุงูู ููุฑูุฉุ ูุฑุงูุจุฉ ุงูุฃุฏุงุกุ ูุงุณุชุดุงุฑุงุช ูููุฉ ูุณุชูุฑุฉ.',
  'ุฏุนู': 'ุฏุนููุง ุงูููู ูุชุงุญ 24/7 ููุดูู ุงูุชุญุฏูุซุงุช ุงูุฃูููุฉุ ุฅุตูุงุญ ุงูุฃุนุทุงูุ ุงูุงุณุชุฌุงุจุฉ ุงูุณุฑูุนุฉุ ูุงูุงุณุชุดุงุฑุงุช ุงูุชูููุฉ.',
  
  // ๐ผ ููุงุฐุฌ ุงูุนูู ูุงูุฃุณุนุงุฑ
  'ูุง ูู ููุงุฐุฌ ุงูุนูู ูู YASุ': 'ููุฏู 5 ููุงุฐุฌ ุนูู: (1) ุชูููุฐ ุงููุดุฑูุน ุจุฏูู ุงูุชุฒุงู ูุณุชูุจููุ (2) ุชูููุฐ ูุน ุฏุนู ููู ูุณุชูุฑุ (3) ุดุฑุงูุฉ ุชุดุบูููุฉ ููุงุจู ูุณุจุฉ ูู ุงูุฃุฑุจุงุญุ (4) ุดุฑุงูุฉ ุงุณุชุฑุงุชูุฌูุฉ ุจููููุฉ ูุดุชุฑูุฉุ (5) ุงุณุชุซูุงุฑ ูุจุงุดุฑ ูู YAS ูุน ููููุฉ ูุณูุทุฑุฉ.',
  'ูุง ูู ุชูููุฉ ุงูุฎุฏูุงุชุ': 'ุงูุชูููุฉ ุชุนุชูุฏ ุนูู ูุชุทูุจุงุช ุงููุดุฑูุน. ูููุฑ ุนุฑูุถ ุฃุณุนุงุฑ ุดูุงูุฉ ุญุณุจ ุงููุฏุฉุ ุงูุชูููุงุช ุงููุทููุจุฉุ ูุญุฌู ุงูุนูู. ุชูุงุตู ูุนูุง ููุญุตูู ุนูู ุนุฑุถ ููุตู.',
  'ุณุนุฑ': 'ุชุฎุชูู ุฃุณุนุงุฑ ูุดุงุฑูุน YAS ุญุณุจ ุญุฌู ุงูุนููุ ุงูุชูููุงุช ุงููุทููุจุฉุ ูุงููุฏุฉ ุงูุฒูููุฉ. ูุฏู ููุง ุชูุงุตูู ูุดุฑูุนู ููุฑุณู ูู ุชุณุนูุฑุฉ ุฏูููุฉ.',
  
  // โณ ุงูุฌุฏูู ุงูุฒููู
  'ูุง ูู ูุฏุฉ ุชูููุฐ ูุดุฑูุน ุชุทููุฑ ูููุน ุฅููุชุฑูููุ': 'ูุฏุฉ ุชุทููุฑ ุงููููุน ุชุนุชูุฏ ุนูู ูุฏู ุชุนููุฏู. ุงูููุงูุน ุงูุตุบูุฑุฉ ุชุณุชุบุฑู 2-4 ุฃุณุงุจูุนุ ุงููุชูุณุทุฉ 6-8 ุฃุณุงุจูุนุ ูุงููุดุงุฑูุน ุงููุจุฑู ุชุตู ุฅูู 12 ุฃุณุจูุน ุฃู ุฃูุซุฑ.',
  'ูู ูุณุชุบุฑู ุชูููุฐ ุชุทุจูู ุฌูุงูุ': 'ุชุทููุฑ ุชุทุจูู ุฌูุงู ุนุงุฏุฉู ูุณุชุบุฑู ุจูู 6 ุฅูู 12 ุฃุณุจูุน ุญุณุจ ุงูุชุนููุฏ ูุงููุธุงุฆู ุงููุทููุจุฉ. ุจุนุถ ุงูุชุทุจููุงุช ุงููุฎุตุตุฉ ูุฏ ุชุฃุฎุฐ ููุช ุฃุทูู.',
  'ููุช': 'ุงูููุช ูุฎุชูู ุญุณุจ ุญุฌู ูุชุนููุฏ ุงููุดุฑูุน. ุงููุดุงุฑูุน ุงูุตุบูุฑุฉ ูุฏ ุชุณุชุบุฑู ุฃุณุงุจูุน ููููุฉุ ุฃูุง ุงูุฃูุธูุฉ ุงูุฃูุจุฑ ููุฏ ุชุญุชุงุฌ ูู ุดูุฑูู ุฅูู ุซูุงุซุฉ.',
  
  // ๐ ุงูุชูุงุตู
  'ููู ูููููู ุงูุชูุงุตู ูุนููุ': 'ููููู ุงูุชูุงุตู ูุนูุง ุนุจุฑ:\n๐ง ุงูุจุฑูุฏ ุงูุฅููุชุฑููู: yascontact@gmail.com\n๐ ุงููุงุชู: +966 50 195 0787\n๐ ุฃู ุนุจุฑ ูููุฐุฌ ุงูุชูุงุตู ุนูู ูููุนูุง ุงูุฑุณูู ูุณูุฑุฏ ุฎูุงู 24 ุณุงุนุฉ.',
  'ุชูุงุตู': 'ุฑุงุณููุง ุนูู yascontact@gmail.com ุฃู ุงุชุตู ุนูู +966 50 195 0787ุ ุฃู ุนุจุฑ ูููุฐุฌ ุงูุชูุงุตู ุนูู ูููุนูุง.',
  
  // โน๏ธ ุฃุณุฆูุฉ ุนุงูุฉ
  'ูู ูู YASุ': 'YAS ูู ุดุฑูุฉ ุชูููุฉ ุณุนูุฏูุฉ ูุชุฎุตุตุฉ ูู ุชุทููุฑ ุงูุญููู ุงูุฑูููุฉ ุงููุจุชูุฑุฉ ููุดุฑูุงุช ูุงูุฌูุงุช ุงูุญููููุฉ ูุงููุงุดุฆุฉ. ูุฑูุฒ ุนูู ุงูุฌูุฏุฉุ ุงูุณุฑุนุฉุ ูุงููุฑููุฉ.',
  'ุฃูู ููุน ููุฑ YASุ': 'ููุฑ YAS ุงูุฑุฆูุณู ูู ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉุ ูุน ุฅููุงููุฉ ุชูุฏูู ุงูุฎุฏูุงุช ููุนููุงุก ูู ุฌููุน ุฃูุญุงุก ุงูุฎููุฌ ูุงูุนุงูู.',
  'ูู ุชุนูููู ูุน ุฌูุงุช ุญููููุฉุ': 'ูุนูุ ูุฏููุง ุฎุจุฑุฉ ูู ุงูุนูู ูุน ุงูุฌูุงุช ุงูุญููููุฉ ูููุชุฒู ุจุฌููุน ุงููุนุงููุฑ ุงูุฃูููุฉ ูุงูุชูุธูููุฉ ุงููุทููุจุฉ.'
};

  const toggleChat = document.getElementById('toggle-chat');
  const closeChat = document.getElementById('close-chat');
  const chatWindow = document.getElementById('chat-window');
  const chatMessages = document.getElementById('chat-messages');
  const userInput = document.getElementById('user-input');
  const sendMessage = document.getElementById('send-message');

  // Debug logging
  console.log('๐ค Chatbot Debug Info:');
  console.log('toggleChat element:', toggleChat);
  console.log('chatWindow element:', chatWindow);
  console.log('chatMessages element:', chatMessages);

  function addMessage(message, isUser = false) {
    if (!chatMessages) return;
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
    messageDiv.innerHTML = `
      <div class="max-w-[80%] ${isUser ? 'bg-primary text-white' : 'bg-gray-100 text-gray-800'} rounded-lg px-4 py-2">
        ${message.split('\n').join('<br>')}
      </div>
    `;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  function processUserInput(input) {
    const question = input.trim();
    let answer = 'ุนุฐุฑุงูุ ูู ุฃุฌุฏ ุฅุฌุงุจุฉ ูุญุฏุฏุฉ ูุณุคุงูู. ููููู ุงูุชูุงุตู ูุนูุง ูุจุงุดุฑุฉ ุนุจุฑ ูููุฐุฌ ุงูุงุชุตุงู ุฃู ุงููุงุชู: <span dir="ltr">+966 50 195 0787</span> ููุญุตูู ุนูู ุงููุณุงุนุฏุฉ ุงููุทููุจุฉ.';
    
    // Check for exact matches or partial matches
    for (const [key, value] of Object.entries(knowledgeBase)) {
      if (question.toLowerCase().includes(key.toLowerCase()) ||
          key.toLowerCase().includes(question.toLowerCase()) ||
          containsKeywords(question, key)) {
        answer = value;
        break;
      }
    }
    
    addMessage(question, true);
    setTimeout(() => addMessage(answer), 500);
  }

  function containsKeywords(userInput, faqQuestion) {
    const userWords = userInput.toLowerCase().split(' ');
    const faqWords = faqQuestion.toLowerCase().split(' ');
    
    // Check if at least 2 key words match
    let matchCount = 0;
    for (const word of userWords) {
      if (word.length > 2 && faqWords.some(faqWord => faqWord.includes(word) || word.includes(faqWord))) {
        matchCount++;
      }
    }
    return matchCount >= 2;
  }

  // Event listeners with null checks
  if (toggleChat && chatWindow) {
    console.log('โ Adding click event listener to toggle button');
    toggleChat.addEventListener('click', function() {
      console.log('๐ฑ๏ธ Toggle button clicked!');
      chatWindow.classList.toggle('hidden');
      console.log('Chat window hidden class:', chatWindow.classList.contains('hidden'));
    });
  } else {
    console.log('โ Toggle button or chat window not found');
    console.log('Available elements with IDs:', document.querySelectorAll('[id]'));
  }
  
  if (closeChat && chatWindow) {
    closeChat.addEventListener('click', () => chatWindow.classList.add('hidden'));
  }
  
  if (sendMessage && userInput) {
    sendMessage.addEventListener('click', () => {
      const message = userInput.value.trim();
      if (message) {
        processUserInput(message);
        userInput.value = '';
      }
    });
  }

  if (userInput) {
    userInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter' && userInput.value.trim()) {
        processUserInput(userInput.value);
        userInput.value = '';
      }
    });
  }

  // Add welcome message
  setTimeout(() => {
    addMessage('ูุฑุญุจุงู! ุฃูุง ุงููุณุงุนุฏ ุงูุฐูู ูุดุฑูุฉ YAS. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ ููููู ุณุคุงูู ุนู ุฎุฏูุงุชูุงุ ูุฏุฉ ุงูุชูููุฐุ ุงูุชูููุฉุ ุฃู ุฃู ุงุณุชูุณุงุฑ ุขุฎุฑ.');
  }, 1000);

  // Manual test function accessible from console
  window.testChatbot = function() {
    console.log('๐งช Testing chatbot manually...');
    const btn = document.getElementById('toggle-chat');
    const window = document.getElementById('chat-window');
    if (btn && window) {
      btn.click();
      console.log('โ Chatbot test successful!');
    } else {
      console.log('โ Chatbot elements not found');
    }
  };

  console.log('๐ก You can test the chatbot manually by typing: testChatbot() in the console');

  // Service Selection Functionality
  document.querySelectorAll('a[data-service]').forEach(button => {
    button.addEventListener('click', function(e) {
      const serviceValue = this.getAttribute('data-service');
      
      // Store the selected service in sessionStorage to persist it
      if (serviceValue) {
        sessionStorage.setItem('selectedService', serviceValue);
      }
      
      // Small delay to ensure the page has scrolled to the form
      setTimeout(() => {
        const serviceDropdown = document.getElementById('service');
        if (serviceDropdown && serviceValue) {
          serviceDropdown.value = serviceValue;
          
          // Add a visual indication that the service was selected
          serviceDropdown.style.borderColor = '#00CCFF';
          serviceDropdown.style.boxShadow = '0 0 0 2px rgba(0, 204, 255, 0.2)';
          
          // Reset the visual indication after 2 seconds
          setTimeout(() => {
            serviceDropdown.style.borderColor = '';
            serviceDropdown.style.boxShadow = '';
          }, 2000);
        }
      }, 100);
    });
  });

  // Check if there's a stored service selection when page loads
  window.addEventListener('load', () => {
    const storedService = sessionStorage.getItem('selectedService');
    if (storedService) {
      const serviceDropdown = document.getElementById('service');
      if (serviceDropdown) {
        serviceDropdown.value = storedService;
        // Clear the stored service after using it
        sessionStorage.removeItem('selectedService');
      }
    }
  });
}); 